---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "eks-container-insights.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "eks-container-insights.labels" . | nindent 4 }}
data:
  fluent.conf: |
    @include containers.conf
    @include systemd.conf
    @include host.conf

    <match fluent.**>
      @type null
    </match>
  containers.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      @label @containers
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/cloudwatch-agent*", "/var/log/containers/fluentd*"]
      pos_file /var/log/fluentd-containers.log.pos
      tag *
      read_from_head true
      <parse>
        @type "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        time_format "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TIME_FORMAT'] || '%Y-%m-%dT%H:%M:%S.%NZ'}"
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_cwagent_logs
      @label @cwagentlogs
      path /var/log/containers/cloudwatch-agent*
      pos_file /var/log/cloudwatch-agent.log.pos
      tag *
      read_from_head true
      <parse>
        @type "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        time_format "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TIME_FORMAT'] || '%Y-%m-%dT%H:%M:%S.%NZ'}"
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_fluentd_logs
      @label @fluentdlogs
      path /var/log/containers/fluentd*
      pos_file /var/log/fluentd.log.pos
      tag *
      read_from_head true
      <parse>
        @type "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TYPE'] || 'json'}"
        time_format "#{ENV['FLUENT_CONTAINER_TAIL_PARSER_TIME_FORMAT'] || '%Y-%m-%dT%H:%M:%S.%NZ'}"
      </parse>
    </source>

    <label @fluentdlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_fluentd
      </filter>

      <filter **>
        @type record_transformer
        @id filter_fluentd_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @containers>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\S/
        separator ""
        flush_interval 5
        timeout_label @NORMAL
      </filter>

      # BEGIN: Additional filters for container logs
      {{- range .Values.additional_container_logs_filters }}
      <filter **>
        {{ . | nindent 8 }}
      </filter>
      {{- end }}
      # END: Additional filters for container logs

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @cwagentlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_cwagent
      </filter>

      <filter **>
        @type record_transformer
        @id filter_cwagent_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
      </filter>

      <filter **>
        @type concat
        key log
        multiline_start_regexp /^\d{4}[-/]\d{1,2}[-/]\d{1,2}/
        separator ""
        flush_interval 5
        timeout_label @NORMAL
      </filter>

      <match **>
        @type relabel
        @label @NORMAL
      </match>
    </label>

    <label @NORMAL>
      <match **>
        @type copy

        <store>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_containers
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/application"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </store>

        {{- if .Values.logToS3Bucket }}
        # BEGIN Archive cluster logs to S3
        <store>
          @type s3
          s3_bucket "#{ENV.fetch('S3_BUCKET')}"
          s3_region "#{ENV.fetch('REGION')}"
          path "#{ENV.fetch('CLUSTER_NAME')}/application/${tag}/"
          {{- .Values.s3Credentials | nindent 10 }}
          # if you want to use ${tag} or %Y/%m/%d/ like syntax in path / s3_object_key_format,
          # need to specify tag for ${tag} and time for %Y/%m/%d in <buffer> argument.
          <buffer tag,time>
            @type file
            path /fluentd/buffer/application
            timekey 3600
            timekey_wait 10m
            timekey_use_utc true
          </buffer>
        </store>
        # END Archive cluster logs to S3
        {{- end }}

      </match>
    </label>
  systemd.conf: |
    <source>
      @type systemd
      @id in_systemd_kubelet
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubelet-pos.json
      </storage>
      read_from_head true
      tag kubelet.service
    </source>

    <source>
      @type systemd
      @id in_systemd_kubeproxy
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-kubeproxy-pos.json
      </storage>
      read_from_head true
      tag kubeproxy.service
    </source>

    <source>
      @type systemd
      @id in_systemd_docker
      @label @systemd
      filters [{ "_SYSTEMD_UNIT": "docker.service" }]
      <entry>
        field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
        field_map_strict true
      </entry>
      path /var/log/journal
      <storage>
        @type local
        persistent true
        path /var/log/fluentd-journald-docker-pos.json
      </storage>
      read_from_head true
      tag docker.service
    </source>

    <label @systemd>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_systemd
      </filter>

      <filter **>
        @type record_transformer
        @id filter_systemd_stream_transformer
        <record>
          stream_name ${tag}-${record["hostname"]}
        </record>
      </filter>

      # BEGIN: Additional filters for systemd logs
      {{- range .Values.additional_systemd_logs_filters }}
      <filter **>
        {{ . | nindent 8 }}
      </filter>
      {{- end }}
      # END: Additional filters for systemd logs

      <match **>
        @type copy

        <store>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_systemd
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane"
          log_stream_name_key stream_name
          auto_create_stream true
          remove_log_stream_name_key true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </store>

        {{- if .Values.logToS3Bucket }}
        # BEGIN Archive cluster logs to S3
        <store>
          @type s3
          s3_bucket "#{ENV.fetch('S3_BUCKET')}"
          s3_region "#{ENV.fetch('REGION')}"
          path "#{ENV.fetch('CLUSTER_NAME')}/dataplane/${tag}-#{ENV.fetch('KUBERNETES_NODE_NAME')}/"
          {{- .Values.s3Credentials | nindent 10 }}
          # if you want to use ${tag} or %Y/%m/%d/ like syntax in path / s3_object_key_format,
          # need to specify tag for ${tag} and time for %Y/%m/%d in <buffer> argument.
          <buffer tag,time>
            @type file
            path /fluentd/buffer/dataplane
            timekey 3600
            timekey_wait 10m
            timekey_use_utc true
          </buffer>
        </store>
        # END Archive cluster logs to S3
        {{- end }}

      </match>
    </label>
  host.conf: |
    <source>
      @type tail
      @id in_tail_dmesg
      @label @hostlogs
      path /var/log/dmesg
      pos_file /var/log/dmesg.log.pos
      tag host.dmesg
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_secure
      @label @hostlogs
      path /var/log/secure
      pos_file /var/log/secure.log.pos
      tag host.secure
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_messages
      @label @hostlogs
      path /var/log/messages
      pos_file /var/log/messages.log.pos
      tag host.messages
      read_from_head true
      <parse>
        @type syslog
      </parse>
    </source>

    <label @hostlogs>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata_host
      </filter>

      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer_host
        <record>
          stream_name ${tag}-${record["host"]}
        </record>
      </filter>

      # BEGIN: Additional filters for host logs
      {{- range .Values.additional_host_logs_filters }}
      <filter **>
        {{ . | nindent 8 }}
      </filter>
      {{- end }}
      # END: Additional filters for host logs

      <match host.**>
        @type copy

        <store>
          @type cloudwatch_logs
          @id out_cloudwatch_logs_host_logs
          region "#{ENV.fetch('REGION')}"
          log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/host"
          log_stream_name_key stream_name
          remove_log_stream_name_key true
          auto_create_stream true
          <buffer>
            flush_interval 5
            chunk_limit_size 2m
            queued_chunks_limit_size 32
            retry_forever true
          </buffer>
        </store>

        {{- if .Values.logToS3Bucket }}
        # BEGIN Archive cluster logs to S3
        <store>
          @type s3
          s3_bucket "#{ENV.fetch('S3_BUCKET')}"
          s3_region "#{ENV.fetch('REGION')}"
          path "#{ENV.fetch('CLUSTER_NAME')}/host/${tag}-#{ENV.fetch('KUBERNETES_NODE_NAME')}/"
          {{- .Values.s3Credentials | nindent 10 }}
          # if you want to use ${tag} or %Y/%m/%d/ like syntax in path / s3_object_key_format,
          # need to specify tag for ${tag} and time for %Y/%m/%d in <buffer> argument.
          <buffer tag,time>
            @type file
            path /fluentd/buffer/host
            timekey 3600
            timekey_wait 10m
            timekey_use_utc true
          </buffer>
        </store>
        # END Archive cluster logs to S3
        {{- end }}

      </match>
    </label>
